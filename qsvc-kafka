#!/usr/bin/env perl
use strict;
use File::Spec;

#Auto-flush stdout
BEGIN { $| = 1; }

my $INSTANCE_VAR_NAME = 'KAFKA_INSTANCE_NAME';
my $ZK_NAMESPACE_VAR_NAME = 'KAFKA_ZK_NAMESPACE';

sub usage {
  print <<EOF;
  $0 zookeeper connectstr
  $0 zookeeper wait
  $0 zookeeper exhibitorurl
  $0 cluster numbrokers
  $0 cluster boostrapstr
  $0 cluster wait
  $0 schemaregistry url
  $0 schemaregistry wait
  $0 restproxy url
  $0 restproxy wait
  $0 manager url
  $0 manager wait
EOF
  exit(1);
}

sub main {
  &usage unless @ARGV;
  my @args = @ARGV;
  my %cmds = (
    zookeeper => \&zookeeper,
    cluster => \&cluster,
    schemaregistry => \&schemaregistry,
    restproxy => \&restproxy,
    manager => \&manager
  );
  &dispatch(\%cmds, \@args);
}

sub dispatch {
  my ($cmds, $args) = @_;
  my $cmd = shift(@$args);
  &usage() unless exists $cmds->{$cmd};
  $cmds->{$cmd}->(@$args);
}

sub zookeeper {
  my @args = @_;
  my %cmds = (
    connectstr => \&zk_connect_str,
    wait => \&zk_wait,
    exhibitorurl => \&zk_exhibitor_url
  );
  &dispatch(\%cmds, \@args);
}

sub cluster {
  my @args = @_;
  my %cmds = (
    numbrokers => \&cluster_num_brokers,
    bootstrapstr => \&cluster_bootstrap_str,
    wait => \&cluster_wait
  );
  &dispatch(\%cmds, \@args);
}

sub schemaregistry {
  my @args = @_;
  my %cmds = (
    url => \&registry_url,
    wait => \&registry_wait
  );
  &dispatch(\%cmds, \@args);
}

sub registry_url {
  print &get_registry_url();
}

sub registry_wait {
  &poll_url("Schema Registry", &get_registry_url());
}

sub restproxy {
  my @args = @_;
  my %cmds = (
    url => \&proxy_url,
    wait => \&proxy_wait
  );
  &dispatch(\%cmds, \@args);
}

sub proxy_url {
  print &get_proxy_url();
}

sub proxy_wait {
  &poll_url("REST Proxy", &get_proxy_url());
}

sub manager {
  my @args = @_;
  my %cmds = (
    url => \&manager_url,
    wait => \&manager_wait
  );
  &dispatch(\%cmds, \@args);
}

sub manager_url {
  print &get_manager_url();
}

sub manager_wait {
  &poll_url("Kafka Manager", &get_manager_url());
}

sub poll_url {
  my ($name, $url) = @_;
  print "Polling $name url ($url) ...";
  until (system("curl --output /dev/null --silent --head --fail $url") == 0) {
    printf('.');
    sleep 2;
  }
  print "OK\n";
}

sub zk_connect_str {
  print &zk_get_connect_str();
}

sub zk_wait {
  my @servers = &zk_get_servers();
  foreach my $svr (@servers) {
    my $zk_poll_cmd = "echo ruok | nc -w 2 $svr->{'host'} $svr->{'port'} | grep imok";
    print "Polling ZooKeeper Service ($zk_poll_cmd) ...";
    until (system($zk_poll_cmd) == 0) {
      print('.');
      sleep(2);
    };
    print "OK\n";
  }
}

sub zk_exhibitor_url {
  print &get_exhibitor_url();
}

sub cluster_num_brokers {
  print scalar(&get_brokers());
}

sub cluster_bootstrap_str {
  print &get_bootstrap_str();
}

sub cluster_wait {
  my $exhibitor_url = &get_exhibitor_url();
  my $num_svcs = scalar(&get_brokers());
  my $zk_prefix = &get_zk_namespace();
  my $brokers_url = "$exhibitor_url/exhibitor/v1/explorer/node?key=" . File::Spec->canonpath("/${zk_prefix}/brokers/ids");
  print "Waiting for at least $num_svcs Kafka brokers ($brokers_url)\n";

  #Non-existent: [{"title":"* Exception *","key":"*","isLazy":false,"expand":false}]
  #Success: [{"title":"101090","key":"/brokers/ids/101090","isLazy":true,"expand":false},{"title":"101111","key":"/brokers/ids/101111","isLazy":true,"expand":false},{"title":"1012144","key":"/brokers/ids/1012144","isLazy":true,"expand":false}]
  my $active_brokers_cmd = "curl --silent '$brokers_url' | jq 'map(select(.key != \"*\")) | length'";
  my $num_found = `$active_brokers_cmd` + 0;
  until ($num_found >= $num_svcs) {
    print "Active Kafka brokers: $num_found\n";
    sleep 2;
    $num_found = `$active_brokers_cmd`;
  }
  print "Found $num_found brokers\n";
}

sub get_proxy_url {
  my ($host, $port) = &get_svc_vars('proxy', '_SERVICE_HOST', '_SERVICE_PORT_HTTP');
  return "http://$host:$port";
}

sub get_manager_url {
  my ($host, $port) = &get_svc_vars('manager', '_SERVICE_HOST', '_SERVICE_PORT_WEB');
  return "http://$host:$port";
}

sub get_registry_url {
  my ($host, $port) = &get_svc_vars('schema-registry', '_SERVICE_HOST', '_SERVICE_PORT_HTTP');
  return "http://$host:$port";
}

sub get_zk_namespace {
  return $ENV{$ZK_NAMESPACE_VAR_NAME} || '';
}

sub zk_get_connect_str {
  my @servers = &zk_get_servers();
  my @svr_strs = map { "$_->{'host'}:$_->{'port'}" } @servers;
  my $zk_path = &get_zk_namespace();
  return join(',', @svr_strs) . File::Spec->canonpath("/$zk_path");
}

sub zk_get_servers {
  die "Need to set $INSTANCE_VAR_NAME env var" unless exists $ENV{$INSTANCE_VAR_NAME};
  my $id = $ENV{$INSTANCE_VAR_NAME};
  my $zk_svc_var_prefix = uc("$id-zookeeper-");
  $zk_svc_var_prefix =~ tr/-/_/;
  my @servers = ();
  my $i = 1;
  do {
    my $host_var = "${zk_svc_var_prefix}${i}_SERVICE_HOST";
    die "Must set $host_var env var" unless exists $ENV{$host_var};
    my $client_port_var = "${zk_svc_var_prefix}${i}_SERVICE_PORT_CLIENT";
    die "Must set $client_port_var env var" unless exists $ENV{$client_port_var};
    push @servers, {host => $ENV{$host_var}, port => $ENV{$client_port_var}};
    $i += 1;
  } while (exists $ENV{"${zk_svc_var_prefix}${i}_SERVICE_HOST"});
  return @servers;
}

sub get_exhibitor_url {
  my ($host, $port) = &get_svc_vars('exhibitor', '_SERVICE_HOST', '_SERVICE_PORT_WEB');
  return "http://$host:$port";
}

sub get_svc_vars {
  my $svc_name = shift(@_);
  die "Need to set $INSTANCE_VAR_NAME env var" unless exists $ENV{$INSTANCE_VAR_NAME};
  my $id = $ENV{$INSTANCE_VAR_NAME};
  my $svc_var_prefix = uc("$id-$svc_name");
  $svc_var_prefix =~ tr/-/_/;
  my @vars = ();
  foreach my $suffix (@_) {
    my $svc_var = "${svc_var_prefix}${suffix}";
    die "Must set $svc_var env var" unless exists $ENV{$svc_var};
    push @vars, $ENV{$svc_var};
  }
  return @vars;
}

sub get_bootstrap_str {
  my @brokers = &get_brokers();
  my @broker_strs = map { "$_->{'host'}:$_->{'port'}" } @brokers;
  return join(',', @broker_strs);
}

sub get_brokers {
  die "Need to set $INSTANCE_VAR_NAME env var" unless exists $ENV{$INSTANCE_VAR_NAME};
  my $id = $ENV{$INSTANCE_VAR_NAME};
  my $svc_var_prefix = uc("$id-broker-");
  $svc_var_prefix =~ tr/-/_/;
  my @brokers = ();
  my $i = 1;
  do {
    my $host_var = "${svc_var_prefix}${i}_SERVICE_HOST";
    die "Must set $host_var env var" unless exists $ENV{$host_var};
    my $port_var = "${svc_var_prefix}${i}_SERVICE_PORT_BROKER";
    die "Must set $port_var env var" unless exists $ENV{$port_var};
    push @brokers, {host => $ENV{$host_var}, port => $ENV{$port_var}};
    $i += 1;
  } while (exists $ENV{"${svc_var_prefix}${i}_SERVICE_HOST"});
  return @brokers;
}

&main();

1;
